syntax = "proto3";

package frenscan.types.v1;

message Transfers {
  uint64 block_number = 1;
  int64 block_timestamp = 2;
  repeated ValueTransfer value_transfers = 3;
  repeated TokenTransfer token_transfers = 4;
  repeated CallTraceRecord call_traces = 5;
  repeated TokenTransfer issued_token_transfers = 6;
}

message TokenTransfer {
  // The transaction hash that generated that transfer.
  string tx_hash = 1;

  // The index of the transaction in the block
  uint32 call_index = 2;

  // The index of the log within the transaction's receipts of the block.
  uint64 log_index = 3;

  // The person that received the transfer, might not be the same as the one that did initiated the
  // transaction.
  string from = 4;

  // The person that received the transfer.
  string to = 5;

  // How many token were transferred in this transfer, will always be 1 in the case of ERC721.
  string value = 6;

  // Token Address
  string token_address = 7;

  // TokenID the identifier of the token for which the transfer is happening. Only
  // available when `schema = ERC721` or `schema = ERC1155`. When `schema = ERC20`, the token id
  // will be empty string "" as the contract itself is the token identifier.
  string token_id = 8;
}

message ValueTransfer {
  // The transaction or block hash that generated that transfer, depending on reason
  string hash = 1;

  // The index of the transaction in the block
  uint32 tx_index = 2;

  // The index of the call in the transaction
  uint32 call_index = 3;

  // The person that received the transfer, might not be the same as the one that did initiated the
  // transaction.
  string from = 4;

  // The person that received the transfer.
  string to = 5;

  // How many token were transferred in this transfer, will always be 1 in the case of ERC721.
  string value = 6;

  string input = 7;

  int32 reason = 8;
}

message CallTraceRecord {
  string hash = 1;
  uint32 index = 2;

  // Transaction calls in JSON
  string traces = 3;
}

message CallTrace {
    uint32 index = 1;
    uint32 parent_index = 2;
    uint32 depth = 3;
    int32 call_type = 4;
    string caller = 5;
    string address = 6;
    string value = 7;
    uint64 gas_limit = 8;
    uint64 gas_consumed = 9;
    string return_data = 10;
    string input = 11;
    bool executed_code = 12;
    bool suicide = 13;
    bool status_failed = 14;
    bool status_reverted = 15;
    string failure_reason = 16;
    bool state_reverted = 17;
    //repeated string account_creations = 18; // # TODO
}
